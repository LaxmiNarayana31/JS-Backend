JavaScript backend:
        
Browser/Mobile --------> API ------> Backend ------> Database 

Mainly in the src directory 3 files are there in backend:

index.js -> You can say this is entry point/starting point. Also database is written here. When appliccation starts running we connect our database.

App -> Configurations, cookies 

constants -> enums, DB-name

Directory structure -> 
DB  -> The actual code connect to database

Models -> If you want to store data. You must have define the structure of database. In models folder database structure are written. It is also called Schema.

Controllers -> What ever methods/functions are written in this folder.
Routes -> Communication ways are defined here.
Middlewares
Utils -> Utility functions. Like sending mails, file uploading functions.
More(Depends on project)

Whenever you request somethng in web someone is here to listen that request.
That some one is express js


/ : Home route
/login
/search
/signup


// Run a backend
npm run start -> To start the applications 
npm i dotenv -> To install envirnoment files
npm install -> To install all node modules

whenever your code to production server. Suppose you declared port 4000. But someone that port may be busy. In that case env file are required and your port not exposed to public.


SyntaxError: Cannot use import statement outside a module -> To fix this add "type": "module" in package.json file


// Create a react app
npm create vite@latest . -> To create a react app
npm install -> To install all node modules
npm run dev -> To start the react applications



blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource
To solve this learn about CORS npm package

Add below code in vite.config.js file -> 
 server: {
    proxy: {
      "/api":"http://localhost:3000"
    },
  },


  Moon moodler -> Used for data modelling for MongoDB  

  ---------------------------------------------------------------------------------------

 in JavaScript there is 2 ways to importing files --> common JS and module

 npm i -D nodemon -> Dev dependency
 npm i -D prettier -> Dev dependency


 Whenever try to connect to database always use try-catch or Promises(resolve-reject).
 When i try to talk with database it takes time. So it is better to use async-await.


-------------------------------------------------------------------------------------------
// HTTP crash course
HTTP -> Hypertext transfer protocol

URL = Uniform Resource Locator
URI =  Uniform Resource Indentifier
URN = Uniform Resource Name 

HTTP Headers:
metadata: Key-value sent along with request and response

Header types:
Request headers -> from client
Response headers -> from server
Representation headers -> Encoding/Compression
Payload headers -> data


Most common headers:
Accept: application/json
User-Agent like postman, any browser request
Authorization: Bearer <token>
Content-Type: images, pdf
Cookies
Cache-control: data expire time


CORS:
Access-control-allow-Origin
Access-control-allow-Methods
Access-control-allow-Headers
Access-control-allow-Credentials

Security:
HTTPS -> HTTP + SSL/TLS
SSL/TLS -> Secure Sockets Layer/Transport Layer Security


HTTP Methods: GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS, CONNECT, TRACE
GET: Retrieve data
POST: Create data
PUT: Update data
DELETE: Delete data
PATCH: Partially update data
HEAD: Retrieve metadata
OPTIONS: Check HTTP method support
CONNECT: Establish a tunnel to the server
TRACE: Echo the request back to the client


Status codes:
100 -> Continue
102 -> Processing

200 -> OK
201 -> Created
202 -> Accepted
203 -> Non-Authoritative Information
204 -> No Content

307 -> Temporary redirect
308 -> Permanent redirect

// client-side errors
400 -> Bad request
401 -> Unauthorized
402 -> Payment required
404 -> Not found 

// server-side errors
500 -> Internal server error
504 -> Gateway time out 



// Routes
routes declaration
you can't directly write app.get() -> in that all you write all routes and controllers in a single file
in this case all routes are write in a separate folder, so it is mandotory to use middlewares -> for that use app.use

what are write in this it act as prefix
standard practise to write this v1 -> version

access token expire in short duration while refresh token expire in long duration. Generally refresh token saved in database.

Mostly aggregation pipelines returns array.